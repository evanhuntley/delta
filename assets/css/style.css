/*!
Theme Name: Barebones
Description: A Sass build of the Barebones WordPress base theme.
Author: James Young (@welcomebrand)
Author URI: http://welcomebrand.co.uk;
Version: 1.0
*/
/*

    GLOBAL RESETS
    =============

    Standard reset styles and a few extra bits and pieces including
    setting border-box on all elements.

*/
html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, dialog, figure, footer, header, hgroup, menu, nav, section, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  vertical-align: baseline;
  background: transparent; }
article, aside, dialog, figure, footer, header, hgroup, nav, section {
  display: block; }
nav ul {
  list-style: none; }
blockquote, q {
  quotes: none; }
blockquote:before, blockquote:after, q:before, q:after {
  content: '';
  content: none; }
a {
  margin: 0;
  padding: 0;
  border: 0;
  vertical-align: baseline;
  background: transparent; }
ins, mark {
  background: #333;
  color: #fff;
  text-decoration: none; }
mark {
  display: inline-block;
  padding: .1em;
  text-shadow: none;
  background: #f2d3a9;
  color: #a93901;
  border-radius: 2px; }
del {
  text-decoration: line-through; }
abbr[title], dfn[title] {
  border-bottom: 1px dotted #000;
  cursor: help; }
table {
  border-collapse: collapse;
  border-spacing: 0; }
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0; }
::-moz-selection, ::-webkit-selection, ::-moz-selection {
  text-shadow: none;
  background: #333;
  color: #fff; }
::-moz-selection, ::-webkit-selection, ::selection {
  text-shadow: none;
  background: #333;
  color: #fff; }
.cf:before, .cf:after {
  content: "";
  display: table; }
.cf:after {
  clear: both; }
.cf {
  zoom: 1; }
[type=submit] {
  cursor: pointer; }
* {
  box-sizing: border-box;
  -webkit-text-size-adjust: none;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }
/*

    MIXINS AND VARIABLES
    ====================

    All mixins and variables live here. Where possible, please include
    a source link if they're written by someone else along with an
    indication of how they should be used in the css files.

*/
/* Colour Palette */
/* REM Font sizing - http://blog.divshot.com/post/29552945105/useful-sass-mixins-for-responsive-design-font-sizing */
/* Define Media Queries - http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
/* Hover animation */
/* Gradient */
/* Clearfix http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
.primary, header {
  *zoom: 1; }
.primary:before, header:before {
    content: " ";
    display: table; }
.primary:after, header:after {
    content: " ";
    display: table;
    clear: both; }
/* Visually hide element http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
/* Image floats */
/*
	NOTE: If you use Google fonts, import it here. Don't include the http bit then it's safe across secure too
	@import url(//fonts.googleapis.com/css?family=Paytone+One;
*/
/*
Font weights set as variables because sometimes there are multiple weights,
so an example use might also be a variable of $mid-weight: 500;
If you've just got normal and bold, you don't need the variable.
*/
html {
  font-size: 100%; }
body {
  font-size: 16px;
  line-height: 24px;
  font-size: 1rem;
  line-height: 1.5rem;
  font-family: 'Raleway', Arial, sans-serif; }
h1, h2, h3, h4, h5, h6 {
  font-size: 24px;
  line-height: 28px;
  font-size: 1.5rem;
  line-height: 1.75rem;
  font-family: 'Montserrat', Arial, sans-serif;
  text-transform: uppercase;
  color: #473c51; }
a {
  -webkit-transition: all 0.3s ease 0s;
  transition: all 0.3s ease 0s;
  color: #02b3c6;
  text-decoration: none; }
a:hover, a:active {
    outline: 0; }
a:focus {
  outline: thin dotted; }
strong, b {
  font-weight: 600; }
.small {
  font-size: 12px;
  line-height: 20px;
  font-size: 0.75rem;
  line-height: 1.25rem; }
pre, code {
  font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal; }
/*

    GENEAL FORM STUFF
    =================

    This is more reset based stuff, if you've got a specific form, it would be
    best to create it as a partial scss file and import it to screen.scss

*/
form {
  margin: 0; }
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }
legend {
  border: 0;
  padding: 0;
  white-space: normal;
  *margin-left: -7px; }
button,
input,
select,
textarea {
  font-size: 100%;
  margin: 0;
  vertical-align: baseline;
  *vertical-align: middle; }
button,
input {
  line-height: normal; }
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer;
  *overflow: visible; }
button[disabled],
input[disabled] {
  cursor: default; }
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0;
  *height: 13px;
  *width: 13px; }
input[type="search"] {
  -webkit-appearance: textfield;
  box-sizing: content-box; }
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }
textarea {
  overflow: auto;
  vertical-align: top;
  resize: vertical; }
.page .section-header {
  text-align: center;
  background: #01acd0;
  background: -webkit-linear-gradient(left, #01acd0, #54e0ce);
  background: linear-gradient(to right, #01acd0, #54e0ce); }
.page .section-header h1 {
    color: #fff;
    font-weight: 400; }
@media only screen and (min-width: 64em) {
      .page .section-header h1 {
        font-size: 70px;
        line-height: 32px;
        font-size: 4.375rem;
        line-height: 2rem; } }
.page .content {
  color: #666666; }
/* Breadcrumbs ------------------------------------------------------ */
.breadcrumbs {
  padding: 1em 0;
  border-bottom: 1px solid #dbdbdb;
  background: #f8f8f8;
  font-size: 12px;
  line-height: 19.2px;
  font-size: 0.75rem;
  line-height: 1.2rem;
  text-transform: uppercase;
  font-weight: 600;
  color: #717171; }
/* Sidebar ---------------------------------------------------------- */
aside .widget h3 {
  font-size: 16px;
  line-height: 24px;
  font-size: 1rem;
  line-height: 1.5rem;
  font-weight: 400; }
aside .widget ul {
  margin: 0 0 1em;
  list-style-type: none; }
aside .widget li {
  padding: .5em;
  border-bottom: 1px solid #eeeeee; }
/*

    SITEWIDE ELEMENTS
    ========================

    Top level layout elements go in here, if you're building a module or page
    element of some sort, split it out into its own scss file and update
    styles.scss to import it.

*/
body {
  width: 100%;
  margin: 0 auto;
  padding: 0; }
h1, h2, h3, h4, h5, h6 {
  margin: 1em 0; }
ul, ol {
  margin: 0 0 1.5em 1.5em; }
li > ul,
li > ol {
  margin-bottom: 0; }
img,
a img {
  -ms-interpolation-mode: bicubic;
  max-width: 100%;
  min-height: auto;
  vertical-align: middle; }
button, .button, .page .woocommerce a.button {
  margin: 1em 0;
  padding: 1em 2em;
  background: #01acd0;
  background: -webkit-linear-gradient(left, #01acd0, #54e0ce);
  background: linear-gradient(to right, #01acd0, #54e0ce);
  text-transform: uppercase;
  color: #fff;
  border-radius: 0; }
/* ================================================================
    Site Layout
=================================================================== */
.main-layout, .container {
  width: 95%;
  margin: 0 auto; }
@media only screen and (min-width: 64em) {
    .main-layout, .container {
      width: 1000px; } }
.primary {
  padding: 1em 0; }
@media only screen and (min-width: 48em) {
    .primary .content {
      float: right;
      width: 75%;
      padding: 0 2em; } }
@media only screen and (min-width: 48em) {
    .primary .secondary-content {
      float: left;
      width: 25%; } }
/* ================================================================
    Header
=================================================================== */
header {
  background: #fff; }
@media only screen and (min-width: 64em) {
    header nav {
      width: 70%;
      float: right; }
      header nav ul {
        margin: 0;
        padding: 0; }
      header nav li {
        display: inline-block; }
        header nav li a {
          display: block;
          padding: 1em;
          text-transform: uppercase;
          font-family: 'Montserrat', Arial, sans-serif;
          color: #1c191f;
          font-size: 14px;
          line-height: 22.4px;
          font-size: 0.875rem;
          line-height: 1.4rem; }
        header nav li.current_page_item a {
          color: #02b3c6; } }
header .logo {
    display: block;
    width: 320px;
    height: 59px;
    margin: 1em 0;
    background: url("../img/l_delta.png");
    background: url("../img/l_delta.svg");
    background-repeat: no-repeat;
    border: 0;
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
    margin: 12px 0; }
@media only screen and (min-width: 64em) {
      header .logo {
        width: 30%;
        float: left; } }
/* Access Nav ------------------------------------------------------- */
.access-nav {
  margin: 0 0 3px;
  padding: .5em 0;
  position: relative;
  color: #fff;
  text-transform: uppercase;
  font-size: 12px;
  line-height: 24px;
  font-size: 0.75rem;
  line-height: 1.5rem;
  font-family: 'Montserrat', Arial, sans-serif;
  background: #1c191f;
  border-bottom: 3px solid; }
.access-nav::before {
    position: absolute;
    bottom: -3px;
    content: "";
    width: 100%;
    height: 3px;
    background-color: #02acd0;
    background-image: -webkit-linear-gradient(left, transparent 50%, #56e2ce 50%);
    background-image: linear-gradient(90deg, transparent 50%, #56e2ce 50%);
    background-size: 350px 350px; }
/* ================================================================
    Footer
=================================================================== */
footer {
  margin: 1em 0 0;
  padding: 1em 0;
  color: #fff;
  background: #1c191f; }

/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLnNjc3MiLCJnbG9iYWxzL19yZXNldC5zY3NzIiwic3R5bGUuY3NzIiwiZ2xvYmFscy9fc2V0dGluZ3Muc2NzcyIsImdsb2JhbHMvX3R5cG9ncmFwaHkuc2NzcyIsImdsb2JhbHMvX2Zvcm1zLnNjc3MiLCJwYWdlcy9fcGFnZS5zY3NzIiwicGFydGlhbHMvX2Jhc2Uuc2NzcyIsInBhcnRpYWxzL19sYXlvdXQuc2NzcyIsInBhcnRpYWxzL19oZWFkZXIuc2NzcyIsInBhcnRpYWxzL19mb290ZXIuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0VBTUU7QUNORjs7Ozs7Ozs7RUFRRTtBQUdGO0VBQW9VLFVBQVM7RUFBQyxXQUFVO0VBQUMsVUFBUztFQUFDLFdBQVU7RUFBQyx5QkFBd0I7RUFBQyx3QkFBdUIsRUFBRTtBQUFEO0VBQTZELGVBQWMsRUFBRTtBQUFEO0VBQU8saUJBQWdCLEVBQUU7QUFBRDtFQUFhLGFBQVksRUFBRTtBQUFEO0VBQW9ELFlBQVc7RUFBQyxjQUFhLEVBQUU7QUFBRDtFQUFFLFVBQVM7RUFBQyxXQUFVO0VBQUMsVUFBUztFQUFDLHlCQUF3QjtFQUFDLHdCQUF1QixFQUFFO0FBQUQ7RUFBUyxpQkFBZ0I7RUFBQyxZQUFXO0VBQUMsc0JBQXFCLEVBQUU7QUFBRDtFQUFLLHNCQUFxQjtFQUFDLGNBQWE7RUFBQyxrQkFBaUI7RUFBQyxvQkFBbUI7RUFBQyxlQUFjO0VBQUMsbUJBQWtCLEVBQUc7QUFBRDtFQUFJLDhCQUE2QixFQUFFO0FBQUQ7RUFBdUIsK0JBQThCO0VBQUMsYUFBWSxFQUFFO0FBQUQ7RUFBTSwwQkFBeUI7RUFBQyxrQkFBaUIsRUFBRTtBQUFEO0VBQUcsZUFBYztFQUFDLFlBQVc7RUFBQyxVQUFTO0VBQUMsMkJBQTBCO0VBQUMsY0FBYTtFQUFDLFdBQVUsRUFBRTtBQUFEO0VBQWtELGtCQUFpQjtFQUFDLGlCQUFnQjtFQUFDLFlBQVcsRUFBRztBQUFuRztFQUFrRCxrQkFBaUI7RUFBQyxp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LFVBQVU7SUFDVixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLG1CQUFtQjtJQUNuQixlQUFlLEVBTWxCO0FOWEQ7TU16Q0o7UUFpRFksV0FBVztRQUNYLFlBQVksRUFFbkIsRUFBQTtBQUdMLHdFQUF3RTtBQUV4RTtFQUNJLGdCQUFnQjtFQUNoQixnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLFlBQVk7RUFDWiwwQkFBMEI7RU4xQzdCLGdCQUFzQjtFQUN0QixrQkFBc0I7RUFDdEIsbUJNeUN5QjtFTnhDekIsb0JNd0M4QjtFQUMzQiw2Q0FBNkM7RUFDN0Msb0JObkRlO0VNb0RmLHlCQUF5QixFQVk1QjtBQXJCRDtJQVlRLG1CQUFtQjtJQUNuQixhQUFhO0lBQ2IsWUFBWTtJQUNaLFlBQVk7SUFDWixZQUFZO0lBQ1osMEJBQTBCO0lBQzFCLDhFQUFpQztJQUFqQyx1RUFBaUM7SUFDakMsNkJBQTZCLEVBQ2hDO0FDakZMOztzRUFFc0U7QUFFdEU7RUFDSSxnQkFBZ0I7RUFDaEIsZUFBZTtFQUNmLFlBQVk7RUFDWixvQlBVZSxFT1RsQiIsImZpbGUiOiJzdHlsZS5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcblRoZW1lIE5hbWU6IEJhcmVib25lc1xuRGVzY3JpcHRpb246IEEgU2FzcyBidWlsZCBvZiB0aGUgQmFyZWJvbmVzIFdvcmRQcmVzcyBiYXNlIHRoZW1lLlxuQXV0aG9yOiBKYW1lcyBZb3VuZyAoQHdlbGNvbWVicmFuZClcbkF1dGhvciBVUkk6IGh0dHA6Ly93ZWxjb21lYnJhbmQuY28udWs7XG5WZXJzaW9uOiAxLjBcbiovXG5cbkBpbXBvcnRcblx0Ly8gXCJnbG9iYWxzL2RlYnVnXCIsXG5cblx0XCJnbG9iYWxzL3Jlc2V0XCIsXG5cdFwiZ2xvYmFscy9zZXR0aW5nc1wiLFxuXHRcImdsb2JhbHMvdHlwb2dyYXBoeVwiLFxuICAgIFwiZ2xvYmFscy9taXNjXCIsXG4gICAgXCJnbG9iYWxzL2Zvcm1zXCIsXG5cbiAgICBcInBhZ2VzL3NpbmdsZVwiLFxuICAgIFwicGFnZXMvcGFnZVwiLFxuXG5cdFwicGFydGlhbHMvYmFzZVwiLFxuICAgIFwicGFydGlhbHMvbGF5b3V0XCIsXG5cdFwicGFydGlhbHMvaGVhZGVyXCIsXG5cdFwicGFydGlhbHMvZm9vdGVyXCI7XG4iLCIvKlxuXG4gICAgR0xPQkFMIFJFU0VUU1xuICAgID09PT09PT09PT09PT1cblxuICAgIFN0YW5kYXJkIHJlc2V0IHN0eWxlcyBhbmQgYSBmZXcgZXh0cmEgYml0cyBhbmQgcGllY2VzIGluY2x1ZGluZ1xuICAgIHNldHRpbmcgYm9yZGVyLWJveCBvbiBhbGwgZWxlbWVudHMuXG5cbiovXG5cblxuaHRtbCxib2R5LGRpdixzcGFuLG9iamVjdCxpZnJhbWUsaDEsaDIsaDMsaDQsaDUsaDYscCxibG9ja3F1b3RlLHByZSxhYmJyLGFkZHJlc3MsY2l0ZSxjb2RlLGRlbCxkZm4sZW0saW1nLGlucyxrYmQscSxzYW1wLHNtYWxsLHN0cm9uZyxzdWIsc3VwLHZhcixiLGksZGwsZHQsZGQsb2wsdWwsbGksZmllbGRzZXQsZm9ybSxsYWJlbCxsZWdlbmQsdGFibGUsY2FwdGlvbix0Ym9keSx0Zm9vdCx0aGVhZCx0cix0aCx0ZCxhcnRpY2xlLGFzaWRlLGRpYWxvZyxmaWd1cmUsZm9vdGVyLGhlYWRlcixoZ3JvdXAsbWVudSxuYXYsc2VjdGlvbix0aW1lLG1hcmssYXVkaW8sdmlkZW97bWFyZ2luOjA7cGFkZGluZzowO2JvcmRlcjowO291dGxpbmU6MDt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50fWFydGljbGUsYXNpZGUsZGlhbG9nLGZpZ3VyZSxmb290ZXIsaGVhZGVyLGhncm91cCxuYXYsc2VjdGlvbntkaXNwbGF5OmJsb2NrfW5hdiB1bHtsaXN0LXN0eWxlOm5vbmV9YmxvY2txdW90ZSxxe3F1b3Rlczpub25lfWJsb2NrcXVvdGU6YmVmb3JlLGJsb2NrcXVvdGU6YWZ0ZXIscTpiZWZvcmUscTphZnRlcntjb250ZW50OicnO2NvbnRlbnQ6bm9uZX1he21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDt2ZXJ0aWNhbC1hbGlnbjpiYXNlbGluZTtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50fWlucyxtYXJre2JhY2tncm91bmQ6IzMzMztjb2xvcjojZmZmO3RleHQtZGVjb3JhdGlvbjpub25lfW1hcmt7ZGlzcGxheTppbmxpbmUtYmxvY2s7cGFkZGluZzouMWVtO3RleHQtc2hhZG93Om5vbmU7YmFja2dyb3VuZDojZjJkM2E5O2NvbG9yOiNhOTM5MDE7Ym9yZGVyLXJhZGl1czoycHg7fWRlbHt0ZXh0LWRlY29yYXRpb246bGluZS10aHJvdWdofWFiYnJbdGl0bGVdLGRmblt0aXRsZV17Ym9yZGVyLWJvdHRvbToxcHggZG90dGVkICMwMDA7Y3Vyc29yOmhlbHB9dGFibGV7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlci1zcGFjaW5nOjB9aHJ7ZGlzcGxheTpibG9jaztoZWlnaHQ6MXB4O2JvcmRlcjowO2JvcmRlci10b3A6MXB4IHNvbGlkICNjY2M7bWFyZ2luOjFlbSAwO3BhZGRpbmc6MH06Oi1tb3otc2VsZWN0aW9uLDo6LXdlYmtpdC1zZWxlY3Rpb24sOjpzZWxlY3Rpb24ge3RleHQtc2hhZG93Om5vbmU7YmFja2dyb3VuZDojMzMzO2NvbG9yOiNmZmY7fS5jZjpiZWZvcmUsLmNmOmFmdGVye2NvbnRlbnQ6XCJcIjtkaXNwbGF5OnRhYmxlO30uY2Y6YWZ0ZXJ7Y2xlYXI6Ym90aDt9LmNme3pvb206MTt9W3R5cGU9c3VibWl0XXtjdXJzb3I6cG9pbnRlcjt9XG5cbiogey1tb3otYm94LXNpemluZzpib3JkZXItYm94Oy13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7LXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0Om5vbmU7LXdlYmtpdC1mb250LXNtb290aGluZzphbnRpYWxpYXNlZDt0ZXh0LXJlbmRlcmluZzpvcHRpbWl6ZUxlZ2liaWxpdHk7fSIsIi8qIVxuVGhlbWUgTmFtZTogQmFyZWJvbmVzXG5EZXNjcmlwdGlvbjogQSBTYXNzIGJ1aWxkIG9mIHRoZSBCYXJlYm9uZXMgV29yZFByZXNzIGJhc2UgdGhlbWUuXG5BdXRob3I6IEphbWVzIFlvdW5nIChAd2VsY29tZWJyYW5kKVxuQXV0aG9yIFVSSTogaHR0cDovL3dlbGNvbWVicmFuZC5jby51aztcblZlcnNpb246IDEuMFxuKi9cbi8qXG5cbiAgICBHTE9CQUwgUkVTRVRTXG4gICAgPT09PT09PT09PT09PVxuXG4gICAgU3RhbmRhcmQgcmVzZXQgc3R5bGVzIGFuZCBhIGZldyBleHRyYSBiaXRzIGFuZCBwaWVjZXMgaW5jbHVkaW5nXG4gICAgc2V0dGluZyBib3JkZXItYm94IG9uIGFsbCBlbGVtZW50cy5cblxuKi9cbmh0bWwsIGJvZHksIGRpdiwgc3Bhbiwgb2JqZWN0LCBpZnJhbWUsIGgxLCBoMiwgaDMsIGg0LCBoNSwgaDYsIHAsIGJsb2NrcXVvdGUsIHByZSwgYWJiciwgYWRkcmVzcywgY2l0ZSwgY29kZSwgZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzYW1wLCBzbWFsbCwgc3Ryb25nLCBzdWIsIHN1cCwgdmFyLCBiLCBpLCBkbCwgZHQsIGRkLCBvbCwgdWwsIGxpLCBmaWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCwgdGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsIGFydGljbGUsIGFzaWRlLCBkaWFsb2csIGZpZ3VyZSwgZm9vdGVyLCBoZWFkZXIsIGhncm91cCwgbWVudSwgbmF2LCBzZWN0aW9uLCB0aW1lLCBtYXJrLCBhdWRpbywgdmlkZW8ge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDtcbiAgb3V0bGluZTogMDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgfVxuXG5hcnRpY2xlLCBhc2lkZSwgZGlhbG9nLCBmaWd1cmUsIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIG5hdiwgc2VjdGlvbiB7XG4gIGRpc3BsYXk6IGJsb2NrOyB9XG5cbm5hdiB1bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7IH1cblxuYmxvY2txdW90ZSwgcSB7XG4gIHF1b3Rlczogbm9uZTsgfVxuXG5ibG9ja3F1b3RlOmJlZm9yZSwgYmxvY2txdW90ZTphZnRlciwgcTpiZWZvcmUsIHE6YWZ0ZXIge1xuICBjb250ZW50OiAnJztcbiAgY29udGVudDogbm9uZTsgfVxuXG5hIHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBib3JkZXI6IDA7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7IH1cblxuaW5zLCBtYXJrIHtcbiAgYmFja2dyb3VuZDogIzMzMztcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuXG5tYXJrIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwYWRkaW5nOiAuMWVtO1xuICB0ZXh0LXNoYWRvdzogbm9uZTtcbiAgYmFja2dyb3VuZDogI2YyZDNhOTtcbiAgY29sb3I6ICNhOTM5MDE7XG4gIGJvcmRlci1yYWRpdXM6IDJweDsgfVxuXG5kZWwge1xuICB0ZXh0LWRlY29yYXRpb246IGxpbmUtdGhyb3VnaDsgfVxuXG5hYmJyW3RpdGxlXSwgZGZuW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgIzAwMDtcbiAgY3Vyc29yOiBoZWxwOyB9XG5cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcbiAgYm9yZGVyLXNwYWNpbmc6IDA7IH1cblxuaHIge1xuICBkaXNwbGF5OiBibG9jaztcbiAgaGVpZ2h0OiAxcHg7XG4gIGJvcmRlcjogMDtcbiAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2M7XG4gIG1hcmdpbjogMWVtIDA7XG4gIHBhZGRpbmc6IDA7IH1cblxuOjotbW96LXNlbGVjdGlvbiwgOjotd2Via2l0LXNlbGVjdGlvbiwgOjpzZWxlY3Rpb24ge1xuICB0ZXh0LXNoYWRvdzogbm9uZTtcbiAgYmFja2dyb3VuZDogIzMzMztcbiAgY29sb3I6ICNmZmY7IH1cblxuLmNmOmJlZm9yZSwgLmNmOmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgZGlzcGxheTogdGFibGU7IH1cblxuLmNmOmFmdGVyIHtcbiAgY2xlYXI6IGJvdGg7IH1cblxuLmNmIHtcbiAgem9vbTogMTsgfVxuXG5bdHlwZT1zdWJtaXRdIHtcbiAgY3Vyc29yOiBwb2ludGVyOyB9XG5cbioge1xuICAtbW96LWJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC13ZWJraXQtYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiBub25lO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTsgfVxuXG4vKlxuXG4gICAgTUlYSU5TIEFORCBWQVJJQUJMRVNcbiAgICA9PT09PT09PT09PT09PT09PT09PVxuXG4gICAgQWxsIG1peGlucyBhbmQgdmFyaWFibGVzIGxpdmUgaGVyZS4gV2hlcmUgcG9zc2libGUsIHBsZWFzZSBpbmNsdWRlXG4gICAgYSBzb3VyY2UgbGluayBpZiB0aGV5J3JlIHdyaXR0ZW4gYnkgc29tZW9uZSBlbHNlIGFsb25nIHdpdGggYW5cbiAgICBpbmRpY2F0aW9uIG9mIGhvdyB0aGV5IHNob3VsZCBiZSB1c2VkIGluIHRoZSBjc3MgZmlsZXMuXG5cbiovXG4vKiBDb2xvdXIgUGFsZXR0ZSAqL1xuLyogUkVNIEZvbnQgc2l6aW5nIC0gaHR0cDovL2Jsb2cuZGl2c2hvdC5jb20vcG9zdC8yOTU1Mjk0NTEwNS91c2VmdWwtc2Fzcy1taXhpbnMtZm9yLXJlc3BvbnNpdmUtZGVzaWduLWZvbnQtc2l6aW5nICovXG4vKiBEZWZpbmUgTWVkaWEgUXVlcmllcyAtIGh0dHA6Ly96ZXJvc2l4dGhyZWUuc2UvOC1zYXNzLW1peGlucy15b3UtbXVzdC1oYXZlLWluLXlvdXItdG9vbGJveC8gKi9cbi8qIEhvdmVyIGFuaW1hdGlvbiAqL1xuLyogR3JhZGllbnQgKi9cbi8qIENsZWFyZml4IGh0dHA6Ly96ZXJvc2l4dGhyZWUuc2UvOC1zYXNzLW1peGlucy15b3UtbXVzdC1oYXZlLWluLXlvdXItdG9vbGJveC8gKi9cbi5wcmltYXJ5LCBoZWFkZXIge1xuICAqem9vbTogMTsgfVxuICAucHJpbWFyeTpiZWZvcmUsIGhlYWRlcjpiZWZvcmUge1xuICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgIGRpc3BsYXk6IHRhYmxlOyB9XG4gIC5wcmltYXJ5OmFmdGVyLCBoZWFkZXI6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiIFwiO1xuICAgIGRpc3BsYXk6IHRhYmxlO1xuICAgIGNsZWFyOiBib3RoOyB9XG5cbi8qIFZpc3VhbGx5IGhpZGUgZWxlbWVudCBodHRwOi8vemVyb3NpeHRocmVlLnNlLzgtc2Fzcy1taXhpbnMteW91LW11c3QtaGF2ZS1pbi15b3VyLXRvb2xib3gvICovXG4vKiBJbWFnZSBmbG9hdHMgKi9cbi8qXG5cdE5PVEU6IElmIHlvdSB1c2UgR29vZ2xlIGZvbnRzLCBpbXBvcnQgaXQgaGVyZS4gRG9uJ3QgaW5jbHVkZSB0aGUgaHR0cCBiaXQgdGhlbiBpdCdzIHNhZmUgYWNyb3NzIHNlY3VyZSB0b29cblx0QGltcG9ydCB1cmwoLy9mb250cy5nb29nbGVhcGlzLmNvbS9jc3M/ZmFtaWx5PVBheXRvbmUrT25lO1xuKi9cbi8qXG5Gb250IHdlaWdodHMgc2V0IGFzIHZhcmlhYmxlcyBiZWNhdXNlIHNvbWV0aW1lcyB0aGVyZSBhcmUgbXVsdGlwbGUgd2VpZ2h0cyxcbnNvIGFuIGV4YW1wbGUgdXNlIG1pZ2h0IGFsc28gYmUgYSB2YXJpYWJsZSBvZiAkbWlkLXdlaWdodDogNTAwO1xuSWYgeW91J3ZlIGp1c3QgZ290IG5vcm1hbCBhbmQgYm9sZCwgeW91IGRvbid0IG5lZWQgdGhlIHZhcmlhYmxlLlxuKi9cbmh0bWwge1xuICBmb250LXNpemU6IDEwMCU7IH1cblxuYm9keSB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcbiAgZm9udC1mYW1pbHk6ICdSYWxld2F5JywgQXJpYWwsIHNhbnMtc2VyaWY7IH1cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gIGZvbnQtc2l6ZTogMjRweDtcbiAgbGluZS1oZWlnaHQ6IDI4cHg7XG4gIGZvbnQtc2l6ZTogMS41cmVtO1xuICBsaW5lLWhlaWdodDogMS43NXJlbTtcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JywgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGNvbG9yOiAjNDczYzUxOyB9XG5cbmEge1xuICAtd2Via2l0LXRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UgMHM7XG4gIC1tb3otdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZSAwcztcbiAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZSAwcztcbiAgY29sb3I6ICMwMmIzYzY7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuICBhOmhvdmVyLCBhOmFjdGl2ZSB7XG4gICAgb3V0bGluZTogMDsgfVxuXG5hOmZvY3VzIHtcbiAgb3V0bGluZTogdGhpbiBkb3R0ZWQ7IH1cblxuc3Ryb25nLCBiIHtcbiAgZm9udC13ZWlnaHQ6IDYwMDsgfVxuXG4uc21hbGwge1xuICBmb250LXNpemU6IDEycHg7XG4gIGxpbmUtaGVpZ2h0OiAyMHB4O1xuICBmb250LXNpemU6IDAuNzVyZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjI1cmVtOyB9XG5cbnByZSwgY29kZSB7XG4gIGZvbnQtZmFtaWx5OiBNb25hY28sIFwiQml0c3RyZWFtIFZlcmEgU2FucyBNb25vXCIsIFwiTHVjaWRhIENvbnNvbGVcIiwgVGVybWluYWw7IH1cblxuLypcblxuICAgIEdFTkVBTCBGT1JNIFNUVUZGXG4gICAgPT09PT09PT09PT09PT09PT1cblxuICAgIFRoaXMgaXMgbW9yZSByZXNldCBiYXNlZCBzdHVmZiwgaWYgeW91J3ZlIGdvdCBhIHNwZWNpZmljIGZvcm0sIGl0IHdvdWxkIGJlXG4gICAgYmVzdCB0byBjcmVhdGUgaXQgYXMgYSBwYXJ0aWFsIHNjc3MgZmlsZSBhbmQgaW1wb3J0IGl0IHRvIHNjcmVlbi5zY3NzXG5cbiovXG5mb3JtIHtcbiAgbWFyZ2luOiAwOyB9XG5cbmZpZWxkc2V0IHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcbiAgbWFyZ2luOiAwIDJweDtcbiAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtOyB9XG5cbmxlZ2VuZCB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDtcbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbiAgKm1hcmdpbi1sZWZ0OiAtN3B4OyB9XG5cbmJ1dHRvbixcbmlucHV0LFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICBmb250LXNpemU6IDEwMCU7XG4gIG1hcmdpbjogMDtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAqdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxuXG5idXR0b24sXG5pbnB1dCB7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7IH1cblxuYnV0dG9uLFxuaHRtbCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLFxuaW5wdXRbdHlwZT1cInJlc2V0XCJdLFxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gICpvdmVyZmxvdzogdmlzaWJsZTsgfVxuXG5idXR0b25bZGlzYWJsZWRdLFxuaW5wdXRbZGlzYWJsZWRdIHtcbiAgY3Vyc29yOiBkZWZhdWx0OyB9XG5cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIHBhZGRpbmc6IDA7XG4gICpoZWlnaHQ6IDEzcHg7XG4gICp3aWR0aDogMTNweDsgfVxuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyB9XG5cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lOyB9XG5cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcbmlucHV0OjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyOiAwO1xuICBwYWRkaW5nOiAwOyB9XG5cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gIHJlc2l6ZTogdmVydGljYWw7IH1cblxuLnBhZ2UgLnNlY3Rpb24taGVhZGVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBiYWNrZ3JvdW5kOiAjMDFhY2QwO1xuICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChsZWZ0LCAjMDFhY2QwLCAjNTRlMGNlKTtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMDFhY2QwLCAjNTRlMGNlKTsgfVxuICAucGFnZSAuc2VjdGlvbi1oZWFkZXIgaDEge1xuICAgIGNvbG9yOiAjZmZmO1xuICAgIGZvbnQtd2VpZ2h0OiA0MDA7IH1cbiAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0ZW0pIHtcbiAgICAgIC5wYWdlIC5zZWN0aW9uLWhlYWRlciBoMSB7XG4gICAgICAgIGZvbnQtc2l6ZTogNzBweDtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDMycHg7XG4gICAgICAgIGZvbnQtc2l6ZTogNC4zNzVyZW07XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAycmVtOyB9IH1cblxuLnBhZ2UgLmNvbnRlbnQge1xuICBjb2xvcjogIzY2NjY2NjsgfVxuXG4vKiBCcmVhZGNydW1icyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi5icmVhZGNydW1icyB7XG4gIHBhZGRpbmc6IDFlbSAwO1xuICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RiZGJkYjtcbiAgYmFja2dyb3VuZDogI2Y4ZjhmODtcbiAgZm9udC1zaXplOiAxMnB4O1xuICBsaW5lLWhlaWdodDogMTkuMnB4O1xuICBmb250LXNpemU6IDAuNzVyZW07XG4gIGxpbmUtaGVpZ2h0OiAxLjJyZW07XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtd2VpZ2h0OiA2MDA7XG4gIGNvbG9yOiAjNzE3MTcxOyB9XG5cbi8qIFNpZGViYXIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuYXNpZGUgLndpZGdldCBoMyB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIGZvbnQtc2l6ZTogMXJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcbiAgZm9udC13ZWlnaHQ6IDQwMDsgfVxuXG5hc2lkZSAud2lkZ2V0IHVsIHtcbiAgbWFyZ2luOiAwIDAgMWVtO1xuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7IH1cblxuYXNpZGUgLndpZGdldCBsaSB7XG4gIHBhZGRpbmc6IC41ZW07XG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZWVlZWVlOyB9XG5cbi8qXG5cbiAgICBTSVRFV0lERSBFTEVNRU5UU1xuICAgID09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgVG9wIGxldmVsIGxheW91dCBlbGVtZW50cyBnbyBpbiBoZXJlLCBpZiB5b3UncmUgYnVpbGRpbmcgYSBtb2R1bGUgb3IgcGFnZVxuICAgIGVsZW1lbnQgb2Ygc29tZSBzb3J0LCBzcGxpdCBpdCBvdXQgaW50byBpdHMgb3duIHNjc3MgZmlsZSBhbmQgdXBkYXRlXG4gICAgc3R5bGVzLnNjc3MgdG8gaW1wb3J0IGl0LlxuXG4qL1xuYm9keSB7XG4gIHdpZHRoOiAxMDAlO1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZzogMDsgfVxuXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcbiAgbWFyZ2luOiAxZW0gMDsgfVxuXG51bCwgb2wge1xuICBtYXJnaW46IDAgMCAxLjVlbSAxLjVlbTsgfVxuXG5saSA+IHVsLFxubGkgPiBvbCB7XG4gIG1hcmdpbi1ib3R0b206IDA7IH1cblxuaW1nLFxuYSBpbWcge1xuICAtbXMtaW50ZXJwb2xhdGlvbi1tb2RlOiBiaWN1YmljO1xuICBtYXgtd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IGF1dG87XG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IH1cblxuYnV0dG9uLCAuYnV0dG9uLCAucGFnZSAud29vY29tbWVyY2UgYS5idXR0b24ge1xuICBtYXJnaW46IDFlbSAwO1xuICBwYWRkaW5nOiAxZW0gMmVtO1xuICBiYWNrZ3JvdW5kOiAjMDFhY2QwO1xuICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChsZWZ0LCAjMDFhY2QwLCAjNTRlMGNlKTtcbiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjMDFhY2QwLCAjNTRlMGNlKTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgY29sb3I6ICNmZmY7XG4gIGJvcmRlci1yYWRpdXM6IDA7IH1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIFNpdGUgTGF5b3V0XG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4ubWFpbi1sYXlvdXQsIC5jb250YWluZXIge1xuICB3aWR0aDogOTUlO1xuICBtYXJnaW46IDAgYXV0bzsgfVxuICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDY0ZW0pIHtcbiAgICAubWFpbi1sYXlvdXQsIC5jb250YWluZXIge1xuICAgICAgd2lkdGg6IDEwMDBweDsgfSB9XG5cbi5wcmltYXJ5IHtcbiAgcGFkZGluZzogMWVtIDA7IH1cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0OGVtKSB7XG4gICAgLnByaW1hcnkgLmNvbnRlbnQge1xuICAgICAgZmxvYXQ6IHJpZ2h0O1xuICAgICAgd2lkdGg6IDc1JTtcbiAgICAgIHBhZGRpbmc6IDAgMmVtOyB9IH1cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0OGVtKSB7XG4gICAgLnByaW1hcnkgLnNlY29uZGFyeS1jb250ZW50IHtcbiAgICAgIGZsb2F0OiBsZWZ0O1xuICAgICAgd2lkdGg6IDI1JTsgfSB9XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBIZWFkZXJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbmhlYWRlciB7XG4gIGJhY2tncm91bmQ6ICNmZmY7IH1cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA2NGVtKSB7XG4gICAgaGVhZGVyIG5hdiB7XG4gICAgICB3aWR0aDogNzAlO1xuICAgICAgZmxvYXQ6IHJpZ2h0OyB9XG4gICAgICBoZWFkZXIgbmF2IHVsIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBwYWRkaW5nOiAwOyB9XG4gICAgICBoZWFkZXIgbmF2IGxpIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gICAgICAgIGhlYWRlciBuYXYgbGkgYSB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgcGFkZGluZzogMWVtO1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICAgICAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JywgQXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgICAgICAgY29sb3I6ICMxYzE5MWY7XG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMi40cHg7XG4gICAgICAgICAgZm9udC1zaXplOiAwLjg3NXJlbTtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS40cmVtOyB9XG4gICAgICAgIGhlYWRlciBuYXYgbGkuY3VycmVudF9wYWdlX2l0ZW0gYSB7XG4gICAgICAgICAgY29sb3I6ICMwMmIzYzY7IH0gfVxuICBoZWFkZXIgLmxvZ28ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHdpZHRoOiAzMjBweDtcbiAgICBoZWlnaHQ6IDU5cHg7XG4gICAgbWFyZ2luOiAxZW0gMDtcbiAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvbF9kZWx0YS5wbmdcIik7XG4gICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2xfZGVsdGEuc3ZnXCIpO1xuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgYm9yZGVyOiAwO1xuICAgIGZvbnQ6IDAvMCBhO1xuICAgIHRleHQtc2hhZG93OiBub25lO1xuICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICBtYXJnaW46IDEycHggMDsgfVxuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjRlbSkge1xuICAgICAgaGVhZGVyIC5sb2dvIHtcbiAgICAgICAgd2lkdGg6IDMwJTtcbiAgICAgICAgZmxvYXQ6IGxlZnQ7IH0gfVxuXG4vKiBBY2Nlc3MgTmF2IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cbi5hY2Nlc3MtbmF2IHtcbiAgbWFyZ2luOiAwIDAgM3B4O1xuICBwYWRkaW5nOiAuNWVtIDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgY29sb3I6ICNmZmY7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGZvbnQtc2l6ZTogMTJweDtcbiAgbGluZS1oZWlnaHQ6IDI0cHg7XG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcbiAgbGluZS1oZWlnaHQ6IDEuNXJlbTtcbiAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JywgQXJpYWwsIHNhbnMtc2VyaWY7XG4gIGJhY2tncm91bmQ6ICMxYzE5MWY7XG4gIGJvcmRlci1ib3R0b206IDNweCBzb2xpZDsgfVxuICAuYWNjZXNzLW5hdjo6YmVmb3JlIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAtM3B4O1xuICAgIGNvbnRlbnQ6IFwiXCI7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiAzcHg7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzAyYWNkMDtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHRyYW5zcGFyZW50IDUwJSwgIzU2ZTJjZSA1MCUpO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMzUwcHggMzUwcHg7IH1cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIEZvb3RlclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuZm9vdGVyIHtcbiAgbWFyZ2luOiAxZW0gMCAwO1xuICBwYWRkaW5nOiAxZW0gMDtcbiAgY29sb3I6ICNmZmY7XG4gIGJhY2tncm91bmQ6ICMxYzE5MWY7IH1cbiIsIi8qXG5cbiAgICBNSVhJTlMgQU5EIFZBUklBQkxFU1xuICAgID09PT09PT09PT09PT09PT09PT09XG5cbiAgICBBbGwgbWl4aW5zIGFuZCB2YXJpYWJsZXMgbGl2ZSBoZXJlLiBXaGVyZSBwb3NzaWJsZSwgcGxlYXNlIGluY2x1ZGVcbiAgICBhIHNvdXJjZSBsaW5rIGlmIHRoZXkncmUgd3JpdHRlbiBieSBzb21lb25lIGVsc2UgYWxvbmcgd2l0aCBhblxuICAgIGluZGljYXRpb24gb2YgaG93IHRoZXkgc2hvdWxkIGJlIHVzZWQgaW4gdGhlIGNzcyBmaWxlcy5cblxuKi9cblxuXG5cbi8qIENvbG91ciBQYWxldHRlICovXG4kd2hpdGU6ICNmZmY7XG4kYmx1ZTogIzAyYjNjNjtcbiRwdXJwbGU6ICM0NzNjNTE7XG4kbGlnaHQtZ3JleTogI2Y4ZjhmODtcbiRkYXJrLXRleHQ6ICMxYzE5MWY7XG4kdGV4dDogIzY2NjY2NjtcblxuLyogUkVNIEZvbnQgc2l6aW5nIC0gaHR0cDovL2Jsb2cuZGl2c2hvdC5jb20vcG9zdC8yOTU1Mjk0NTEwNS91c2VmdWwtc2Fzcy1taXhpbnMtZm9yLXJlc3BvbnNpdmUtZGVzaWduLWZvbnQtc2l6aW5nICovXG4vLyBVc2U6IEBpbmNsdWRlIGZvbnQtc2l6ZSgxLDEuNSk7XG5AbWl4aW4gZm9udC1zaXplKCRzaXplOiAxLCAkbGluZTogJHNpemUgKiAxLjUpIHtcblx0Zm9udC1zaXplICAgICA6ICgkc2l6ZSAqIDE2KSArIHB4O1xuXHRsaW5lLWhlaWdodCAgIDogKCRsaW5lICogMTYpICsgcHg7XG5cdGZvbnQtc2l6ZSAgICAgOiAkc2l6ZSArIHJlbTtcblx0bGluZS1oZWlnaHQgICA6ICRsaW5lICsgcmVtO1xuXHR9XG5cbi8qIERlZmluZSBNZWRpYSBRdWVyaWVzIC0gaHR0cDovL3plcm9zaXh0aHJlZS5zZS84LXNhc3MtbWl4aW5zLXlvdS1tdXN0LWhhdmUtaW4teW91ci10b29sYm94LyAqL1xuLy8gVXNlOiBAaW5jbHVkZSBicC1zIHt9O1xuQG1peGluIGJwLXMge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzBlbSkgeyBAY29udGVudDsgfVxuICAgIH1cblxuQG1peGluIGJwLW0ge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMzcuNWVtKSB7IEBjb250ZW50OyB9XG4gICAgfVxuXG5AbWl4aW4gYnAtbCB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA0OGVtKSB7IEBjb250ZW50OyB9XG4gICAgfVxuXG5AbWl4aW4gYnAteGwge1xuICAgIEBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNjRlbSkgeyBAY29udGVudDsgfVxuICAgIH1cblxuQG1peGluIGJwLXh4bCB7XG4gICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA3OC43NWVtKSB7IEBjb250ZW50OyB9XG4gICAgfVxuXG4vKiBIb3ZlciBhbmltYXRpb24gKi9cbi8vIFVzZTogQGluY2x1ZGUgaG92ZXItZmFkZTtcbkBtaXhpbiBob3Zlci1mYWRlIHtcblx0LXdlYmtpdC10cmFuc2l0aW9uOiBhbGwgMC4zcyBlYXNlIDBzO1xuXHQtbW96LXRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UgMHM7XG5cdHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2UgMHM7XG5cdH1cblxuLyogR3JhZGllbnQgKi9cbi8vIFVzZTogQGluY2x1ZGUgZ3JhZGllbnQoI2YzNiwjZjYwKTtcbkBtaXhpbiBncmFkaWVudCgkZnJvbSwgJHRvKSB7XG4gICAgYmFja2dyb3VuZDogICAgICAgICAtd2Via2l0LWdyYWRpZW50KGxpbmVhciwgbGVmdCB0b3AsIGxlZnQgYm90dG9tLCBmcm9tKCRmcm9tKSwgdG8oJHRvKSk7XG4gICAgYmFja2dyb3VuZDogICAgICAgICAtbW96LWxpbmVhci1ncmFkaWVudCh0b3AsICAkZnJvbSwgJHRvKTtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAgIC1tcy1saW5lYXItZ3JhZGllbnQodG9wLCAkZnJvbSwgJHRvKTtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiAgIC1vLWxpbmVhci1ncmFkaWVudCh0b3AsICRmcm9tLCAkdG8pO1xuICAgIC1tcy1maWx0ZXI6ICAgICAgICAgXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuZ3JhZGllbnQoc3RhcnRDb2xvclN0cj0nJGZyb20nLCBFbmRDb2xvclN0cj0nJHRvJylcIjtcbiAgICBmaWx0ZXI6ICAgICAgICAgICAgIHByb2dpZDpEWEltYWdlVHJhbnNmb3JtLk1pY3Jvc29mdC5ncmFkaWVudChzdGFydENvbG9yc3RyPScjeyRmcm9tfScsIGVuZENvbG9yc3RyPScjeyR0b30nKTtcbiAgICB9XG5cbi8qIENsZWFyZml4IGh0dHA6Ly96ZXJvc2l4dGhyZWUuc2UvOC1zYXNzLW1peGlucy15b3UtbXVzdC1oYXZlLWluLXlvdXItdG9vbGJveC8gKi9cbi8vIFVzZTogQGV4dGVuZCAlY2xlYXJmaXg7XG4lY2xlYXJmaXgge1xuICAgICp6b29tOiAxO1xuXG4gICAgJjpiZWZvcmUge1xuICAgICAgICBjb250ZW50OiBcIiBcIjtcbiAgICAgICAgZGlzcGxheTogdGFibGU7XG4gICAgICAgIH1cblxuICAgICY6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiBcIiBcIjtcbiAgICAgICAgZGlzcGxheTogdGFibGU7XG4gICAgICAgIGNsZWFyOiBib3RoO1xuICAgICAgICB9XG4gICAgfVxuXG4vKiBWaXN1YWxseSBoaWRlIGVsZW1lbnQgaHR0cDovL3plcm9zaXh0aHJlZS5zZS84LXNhc3MtbWl4aW5zLXlvdS1tdXN0LWhhdmUtaW4teW91ci10b29sYm94LyAqL1xuLy8gVXNlOiBAZXh0ZW5kICV2aXN1YWxseWhpZGRlbjtcbiV2aXN1YWxseWhpZGRlbiB7XG4gICAgbWFyZ2luOiAtMXB4O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgd2lkdGg6IDFweDtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIGNsaXA6IHJlY3QoMCAwIDAgMCk7XG4gICAgY2xpcDogcmVjdCgwLCAwLCAwLCAwKTtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgfVxuXG4vKiBJbWFnZSBmbG9hdHMgKi9cbi8vIFVzZTogQGV4dGVuZCAlZmxvYXRsZWZ0XG4lZmxvYXRsZWZ0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW46IDAgMWVtIDFlbSAwO1xuICAgIEBpbmNsdWRlIGJwLW0ge1xuICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICB9XG4gICAgfVxuXG4vLyBVc2U6IEBleHRlbmQgJWZsb2F0cmlnaHRcbiVmbG9hdHJpZ2h0IHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW46IDAgMCAxZW0gMWVtO1xuICAgIEBpbmNsdWRlIGJwLW0ge1xuICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICAgICAgfVxuICAgIH1cblxuLy8vIENvbnZlcnQgYW5nbGVcbi8vLyBAYXV0aG9yIENocmlzIEVwcHN0ZWluXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICR2YWx1ZSAtIFZhbHVlIHRvIGNvbnZlcnRcbi8vLyBAcGFyYW0ge1N0cmluZ30gJHVuaXQgLSBVbml0IHRvIGNvbnZlcnQgdG9cbi8vLyBAcmV0dXJuIHtOdW1iZXJ9IENvbnZlcnRlZCBhbmdsZVxuQGZ1bmN0aW9uIGNvbnZlcnQtYW5nbGUoJHZhbHVlLCAkdW5pdCkge1xuICAkY29udmVydGFibGUtdW5pdHM6IGRlZyBncmFkIHR1cm4gcmFkO1xuICAkY29udmVyc2lvbi1mYWN0b3JzOiAxICgxMGdyYWQvOWRlZykgKDF0dXJuLzM2MGRlZykgKDMuMTQxNTkyNnJhZC8xODBkZWcpO1xuICBAaWYgaW5kZXgoJGNvbnZlcnRhYmxlLXVuaXRzLCB1bml0KCR2YWx1ZSkpIGFuZCBpbmRleCgkY29udmVydGFibGUtdW5pdHMsICR1bml0KSB7XG4gICAgQHJldHVybiAkdmFsdWVcbiAgICAgICAgICAgICAvIG50aCgkY29udmVyc2lvbi1mYWN0b3JzLCBpbmRleCgkY29udmVydGFibGUtdW5pdHMsIHVuaXQoJHZhbHVlKSkpXG4gICAgICAgICAgICAgKiBudGgoJGNvbnZlcnNpb24tZmFjdG9ycywgaW5kZXgoJGNvbnZlcnRhYmxlLXVuaXRzLCAkdW5pdCkpO1xuICB9XG5cbiAgQHdhcm4gXCJDYW5ub3QgY29udmVydCBgI3t1bml0KCR2YWx1ZSl9YCB0byBgI3skdW5pdH1gLlwiO1xufVxuXG4vLy8gVGVzdCBpZiBgJHZhbHVlYCBpcyBhbiBhbmdsZVxuLy8vIEBwYXJhbSB7Kn0gJHZhbHVlIC0gVmFsdWUgdG8gdGVzdFxuLy8vIEByZXR1cm4ge0Jvb2x9XG5AZnVuY3Rpb24gaXMtZGlyZWN0aW9uKCR2YWx1ZSkge1xuICAkaXMtZGlyZWN0aW9uOiBpbmRleCgodG8gdG9wLCB0byB0b3AgcmlnaHQsIHRvIHJpZ2h0IHRvcCwgdG8gcmlnaHQsIHRvIGJvdHRvbSByaWdodCwgdG8gcmlnaHQgYm90dG9tLCB0byBib3R0b20sIHRvIGJvdHRvbSBsZWZ0LCB0byBsZWZ0IGJvdHRvbSwgdG8gbGVmdCwgdG8gbGVmdCB0b3AsIHRvIHRvcCBsZWZ0KSwgJHZhbHVlKTtcbiAgJGlzLWFuZ2xlOiB0eXBlLW9mKCR2YWx1ZSkgPT0gJ251bWJlcicgYW5kIGluZGV4KCdkZWcnICdncmFkJyAndHVybicgJ3JhZCcsIHVuaXQoJHZhbHVlKSk7XG5cbiAgQHJldHVybiAkaXMtZGlyZWN0aW9uIG9yICRpcy1hbmdsZTtcbn1cblxuLy8vIENvbnZlcnQgYSBkaXJlY3Rpb24gdG8gbGVnYWN5IHN5bnRheFxuLy8vIEBwYXJhbSB7S2V5d29yZCB8IEFuZ2xlfSAkdmFsdWUgLSBWYWx1ZSB0byBjb252ZXJ0XG4vLy8gQHJlcXVpcmUge2Z1bmN0aW9ufSBpcy1kaXJlY3Rpb25cbi8vLyBAcmVxdWlyZSB7ZnVuY3Rpb259IGNvbnZlcnQtYW5nbGVcbkBmdW5jdGlvbiBsZWdhY3ktZGlyZWN0aW9uKCR2YWx1ZSkge1xuICBAaWYgaXMtZGlyZWN0aW9uKCR2YWx1ZSkgPT0gZmFsc2Uge1xuICAgIEB3YXJuIFwiQ2Fubm90IGNvbnZlcnQgYCN7JHZhbHVlfWAgdG8gbGVnYWN5IHN5bnRheCBiZWNhdXNlIGl0IGRvZXNuJ3Qgc2VlbSB0byBiZSBhbiBhbmdsZSBvciBhIGRpcmVjdGlvblwiO1xuICB9XG5cbiAgJGNvbnZlcnNpb24tbWFwOiAoXG4gICAgdG8gdG9wICAgICAgICAgIDogYm90dG9tLFxuICAgIHRvIHRvcCByaWdodCAgICA6IGJvdHRvbSBsZWZ0LFxuICAgIHRvIHJpZ2h0IHRvcCAgICA6IGxlZnQgYm90dG9tLFxuICAgIHRvIHJpZ2h0ICAgICAgICA6IGxlZnQsXG4gICAgdG8gYm90dG9tIHJpZ2h0IDogdG9wIGxlZnQsXG4gICAgdG8gcmlnaHQgYm90dG9tIDogbGVmdCB0b3AsXG4gICAgdG8gYm90dG9tICAgICAgIDogdG9wLFxuICAgIHRvIGJvdHRvbSBsZWZ0ICA6IHRvcCByaWdodCxcbiAgICB0byBsZWZ0IGJvdHRvbSAgOiByaWdodCB0b3AsXG4gICAgdG8gbGVmdCAgICAgICAgIDogcmlnaHQsXG4gICAgdG8gbGVmdCB0b3AgICAgIDogcmlnaHQgYm90dG9tLFxuICAgIHRvIHRvcCBsZWZ0ICAgICA6IGJvdHRvbSByaWdodFxuICApO1xuXG4gIEBpZiBtYXAtaGFzLWtleSgkY29udmVyc2lvbi1tYXAsICR2YWx1ZSkge1xuICAgIEByZXR1cm4gbWFwLWdldCgkY29udmVyc2lvbi1tYXAsICR2YWx1ZSk7XG4gIH1cblxuICBAcmV0dXJuIDkwZGVnIC0gY29udmVydC1hbmdsZSgkdmFsdWUsICdkZWcnKTtcbn1cblxuLy8vIE1peGluIHByaW50aW5nIGEgbGluZWFyLWdyYWRpZW50XG4vLy8gYXMgd2VsbCBhcyBhIHBsYWluIGNvbG9yIGZhbGxiYWNrXG4vLy8gYW5kIHRoZSBgLXdlYmtpdC1gIHByZWZpeGVkIGRlY2xhcmF0aW9uXG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vLyBAcGFyYW0ge1N0cmluZyB8IExpc3QgfCBBbmdsZX0gJGRpcmVjdGlvbiAtIExpbmVhciBncmFkaWVudCBkaXJlY3Rpb25cbi8vLyBAcGFyYW0ge0FyZ2xpc3R9ICRjb2xvci1zdG9wcyAtIExpc3Qgb2YgY29sb3Itc3RvcHMgY29tcG9zaW5nIHRoZSBncmFkaWVudFxuQG1peGluIGxpbmVhci1ncmFkaWVudCgkZGlyZWN0aW9uLCAkY29sb3Itc3RvcHMuLi4pIHtcbiAgQGlmIGlzLWRpcmVjdGlvbigkZGlyZWN0aW9uKSA9PSBmYWxzZSB7XG4gICAgJGNvbG9yLXN0b3BzOiAoJGRpcmVjdGlvbiwgJGNvbG9yLXN0b3BzKTtcbiAgICAkZGlyZWN0aW9uOiAxODBkZWc7XG4gIH1cblxuICBiYWNrZ3JvdW5kOiBudGgobnRoKCRjb2xvci1zdG9wcywgMSksIDEpO1xuICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChsZWdhY3ktZGlyZWN0aW9uKCRkaXJlY3Rpb24pLCAkY29sb3Itc3RvcHMpO1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoJGRpcmVjdGlvbiwgJGNvbG9yLXN0b3BzKTtcbn1cblxuJWdyYWRpZW50IHtcblx0QGluY2x1ZGUgbGluZWFyLWdyYWRpZW50KCMzMUI3RDcsICNFREFDN0QpO1xufVxuIiwiLypcblx0Tk9URTogSWYgeW91IHVzZSBHb29nbGUgZm9udHMsIGltcG9ydCBpdCBoZXJlLiBEb24ndCBpbmNsdWRlIHRoZSBodHRwIGJpdCB0aGVuIGl0J3Mgc2FmZSBhY3Jvc3Mgc2VjdXJlIHRvb1xuXHRAaW1wb3J0IHVybCgvL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UGF5dG9uZStPbmU7XG4qL1xuXG4vKlxuRm9udCB3ZWlnaHRzIHNldCBhcyB2YXJpYWJsZXMgYmVjYXVzZSBzb21ldGltZXMgdGhlcmUgYXJlIG11bHRpcGxlIHdlaWdodHMsXG5zbyBhbiBleGFtcGxlIHVzZSBtaWdodCBhbHNvIGJlIGEgdmFyaWFibGUgb2YgJG1pZC13ZWlnaHQ6IDUwMDtcbklmIHlvdSd2ZSBqdXN0IGdvdCBub3JtYWwgYW5kIGJvbGQsIHlvdSBkb24ndCBuZWVkIHRoZSB2YXJpYWJsZS5cbiovXG4kbm9ybWFsOiBub3JtYWw7XG4kYm9sZDogYm9sZDtcblxuaHRtbCB7XG4gICAgZm9udC1zaXplOiAxMDAlO1xuICAgIH1cblxuYm9keSB7XG4gICAgQGluY2x1ZGUgZm9udC1zaXplKDEsMS41KTtcbiAgICBmb250LWZhbWlseTogJ1JhbGV3YXknLCBBcmlhbCwgc2Fucy1zZXJpZjtcbn1cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG5cdEBpbmNsdWRlIGZvbnQtc2l6ZSgxLjUsIDEuNzUpO1xuICAgIGZvbnQtZmFtaWx5OiAnTW9udHNlcnJhdCcsIEFyaWFsLCBzYW5zLXNlcmlmO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgY29sb3I6ICRwdXJwbGU7XG59XG5cbiAgICBoMiB7fVxuICAgIGgzIHt9XG4gICAgaDQge31cbiAgICBoNSB7fVxuICAgIGg2IHt9XG5cbnAge1xuXG5cdH1cblxuYSB7XG5cdEBpbmNsdWRlIGhvdmVyLWZhZGU7XG4gICAgY29sb3I6ICRibHVlO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcblxuXHQmOmhvdmVyLFxuICAgICY6YWN0aXZlIHtcbiAgICAgICAgb3V0bGluZTogMDtcblx0XHR9XG5cdH1cblxuYTpmb2N1cyB7XG4gICAgb3V0bGluZTogdGhpbiBkb3R0ZWQ7XG4gICAgfVxuXG5zdHJvbmcsIGIge1xuXHRmb250LXdlaWdodDogNjAwO1xufVxuXG4uc21hbGwge1xuXHRAaW5jbHVkZSBmb250LXNpemUoLjc1LCAxLjI1KTtcblx0fVxuXG5wcmUsIGNvZGUge1xuICAgIGZvbnQtZmFtaWx5OiBNb25hY28sIFwiQml0c3RyZWFtIFZlcmEgU2FucyBNb25vXCIsIFwiTHVjaWRhIENvbnNvbGVcIiwgVGVybWluYWw7XG5cdH1cblxuYmxvY2txdW90ZSB7XG5cbiAgICBjaXRlIHtcblxuICAgICAgICB9XG4gICAgfVxuIiwiLypcblxuICAgIEdFTkVBTCBGT1JNIFNUVUZGXG4gICAgPT09PT09PT09PT09PT09PT1cblxuICAgIFRoaXMgaXMgbW9yZSByZXNldCBiYXNlZCBzdHVmZiwgaWYgeW91J3ZlIGdvdCBhIHNwZWNpZmljIGZvcm0sIGl0IHdvdWxkIGJlXG4gICAgYmVzdCB0byBjcmVhdGUgaXQgYXMgYSBwYXJ0aWFsIHNjc3MgZmlsZSBhbmQgaW1wb3J0IGl0IHRvIHNjcmVlbi5zY3NzXG5cbiovXG5cbmZvcm0ge1xuICAgIG1hcmdpbjogMDtcbiAgICB9XG5cbmZpZWxkc2V0IHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICAgIG1hcmdpbjogMCAycHg7XG4gICAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtO1xuICAgIH1cblxubGVnZW5kIHtcbiAgICBib3JkZXI6IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICB3aGl0ZS1zcGFjZTogbm9ybWFsO1xuICAgICptYXJnaW4tbGVmdDogLTdweDtcbiAgICB9XG5cbmJ1dHRvbixcbmlucHV0LFxuc2VsZWN0LFxudGV4dGFyZWEge1xuICAgIGZvbnQtc2l6ZTogMTAwJTtcbiAgICBtYXJnaW46IDA7XG4gICAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAgICp2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIH1cblxuYnV0dG9uLFxuaW5wdXQge1xuICAgIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG4gICAgfVxuXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgKm92ZXJmbG93OiB2aXNpYmxlO1xuICAgIH1cblxuYnV0dG9uW2Rpc2FibGVkXSxcbmlucHV0W2Rpc2FibGVkXSB7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIH1cblxuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLFxuaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHBhZGRpbmc6IDA7XG4gICAgKmhlaWdodDogMTNweDtcbiAgICAqd2lkdGg6IDEzcHg7XG4gICAgfVxuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbiAgICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgYm94LXNpemluZzogY29udGVudC1ib3g7XG4gICAgfVxuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAgIH1cblxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICAgIGJvcmRlcjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIH1cblxudGV4dGFyZWEge1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XG4gICAgcmVzaXplOiB2ZXJ0aWNhbDtcbiAgICB9IiwiLy8gVGhpcyBpcyB3aGVyZSB5b3UgY2FuIHB1dCBhbnkgc3R5bGVzIHNwZWNpZmljIHRvIGEgcGFnZVxuLy8gLnBhZ2UgaXMgdGhlIGNsYXNzIFdvcmRQcmVzcyBvdXRwdXRzIHRvIHRoZSBib2R5IHRhZ1xuLnBhZ2Uge1xuXG4gICAgLnNlY3Rpb24taGVhZGVyIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICBAaW5jbHVkZSBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMwMWFjZDAsICM1NGUwY2UpO1xuXG4gICAgICAgIGgxIHtcbiAgICAgICAgICAgIGNvbG9yOiAjZmZmO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcblxuICAgICAgICAgICAgQGluY2x1ZGUgYnAteGwge1xuICAgICAgICAgICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSg0LjM3NSwgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAuY29udGVudCB7XG4gICAgICAgIGNvbG9yOiAkdGV4dDtcbiAgICB9XG59XG5cbi8qIEJyZWFkY3J1bWJzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG4uYnJlYWRjcnVtYnMge1xuICAgIHBhZGRpbmc6IDFlbSAwO1xuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZGJkYmRiO1xuICAgIGJhY2tncm91bmQ6ICRsaWdodC1ncmV5O1xuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSguNzUsIDEuMik7XG4gICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgICBmb250LXdlaWdodDogNjAwO1xuICAgIGNvbG9yOiAjNzE3MTcxO1xuXG4gICAgc3BhbiB7XG5cbiAgICB9XG5cbiAgICBhIHtcblxuICAgIH1cbn1cblxuLyogU2lkZWJhciAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbmFzaWRlIHtcblxuICAgIC53aWRnZXQge1xuXG4gICAgICAgIGgzIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSgxLCAxLjUpO1xuICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHVsIHtcbiAgICAgICAgICAgIG1hcmdpbjogMCAwIDFlbTtcbiAgICAgICAgICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpIHtcbiAgICAgICAgICAgIHBhZGRpbmc6IC41ZW07XG4gICAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2VlZWVlZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qXG5cbiAgICBTSVRFV0lERSBFTEVNRU5UU1xuICAgID09PT09PT09PT09PT09PT09PT09PT09PVxuXG4gICAgVG9wIGxldmVsIGxheW91dCBlbGVtZW50cyBnbyBpbiBoZXJlLCBpZiB5b3UncmUgYnVpbGRpbmcgYSBtb2R1bGUgb3IgcGFnZVxuICAgIGVsZW1lbnQgb2Ygc29tZSBzb3J0LCBzcGxpdCBpdCBvdXQgaW50byBpdHMgb3duIHNjc3MgZmlsZSBhbmQgdXBkYXRlXG4gICAgc3R5bGVzLnNjc3MgdG8gaW1wb3J0IGl0LlxuXG4qL1xuXG5ib2R5IHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtYXJnaW46IDAgYXV0bztcbiAgICBwYWRkaW5nOiAwO1xufVxuXG5oMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHtcbiAgICBtYXJnaW46IDFlbSAwO1xufVxuXG51bCwgb2wge1xuICAgIG1hcmdpbjogMCAwIDEuNWVtIDEuNWVtO1xuICAgIH1cblxubGkge1xuICAgID4gdWwsXG4gICAgPiBvbCB7XG4gICAgICAgICBtYXJnaW4tYm90dG9tOjA7XG4gICAgICAgICB9XG4gICAgfVxuXG5pbWcsXG5hIGltZyB7XG4gICAgLW1zLWludGVycG9sYXRpb24tbW9kZTogYmljdWJpYztcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgbWluLWhlaWdodDogYXV0bztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIH1cblxuYnV0dG9uLCAuYnV0dG9uLCAucGFnZSAud29vY29tbWVyY2UgYS5idXR0b24ge1xuICAgIG1hcmdpbjogMWVtIDA7XG4gICAgcGFkZGluZzogMWVtIDJlbTtcbiAgICBAaW5jbHVkZSBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMwMWFjZDAsICM1NGUwY2UpO1xuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbn1cbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBTaXRlIExheW91dFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4ubWFpbi1sYXlvdXQsIC5jb250YWluZXIge1xuICAgIHdpZHRoOiA5NSU7XG4gICAgbWFyZ2luOiAwIGF1dG87XG5cbiAgICBAaW5jbHVkZSBicC14bCB7XG4gICAgICAgIHdpZHRoOiAxMDAwcHg7XG4gICAgfVxufVxuXG4ucHJpbWFyeSB7XG4gICAgQGV4dGVuZCAlY2xlYXJmaXg7XG4gICAgcGFkZGluZzogMWVtIDA7XG5cbiAgICAuY29udGVudCB7XG5cbiAgICAgICAgQGluY2x1ZGUgYnAtbCB7XG4gICAgICAgICAgICBmbG9hdDogcmlnaHQ7XG4gICAgICAgICAgICB3aWR0aDogNzUlO1xuICAgICAgICAgICAgcGFkZGluZzogMCAyZW07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAuc2Vjb25kYXJ5LWNvbnRlbnQge1xuXG4gICAgICAgIEBpbmNsdWRlIGJwLWwge1xuICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XG4gICAgICAgICAgICB3aWR0aDogMjUlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgIEhlYWRlclxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG5oZWFkZXIge1xuICAgIEBleHRlbmQgJWNsZWFyZml4O1xuICAgIGJhY2tncm91bmQ6ICNmZmY7XG5cbiAgICBuYXYge1xuXG4gICAgICAgIEBpbmNsdWRlIGJwLXhsIHtcbiAgICAgICAgICAgIHdpZHRoOiA3MCU7XG4gICAgICAgICAgICBmbG9hdDogcmlnaHQ7XG5cbiAgICAgICAgICAgIHVsIHtcbiAgICAgICAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgICAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGkge1xuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcblxuICAgICAgICAgICAgICAgIGEge1xuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogMWVtO1xuICAgICAgICAgICAgICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICAgICAgICAgICAgICBmb250LWZhbWlseTogJ01vbnRzZXJyYXQnLCBBcmlhbCwgc2Fucy1zZXJpZjtcbiAgICAgICAgICAgICAgICAgICAgY29sb3I6ICRkYXJrLXRleHQ7XG4gICAgICAgICAgICAgICAgICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSguODc1LCAxLjQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICYuY3VycmVudF9wYWdlX2l0ZW0gYSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbG9yOiAkYmx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAubG9nbyB7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICB3aWR0aDogMzIwcHg7XG4gICAgICAgIGhlaWdodDogNTlweDtcbiAgICAgICAgbWFyZ2luOiAxZW0gMDtcbiAgICAgICAgYmFja2dyb3VuZDogdXJsKFwiLi4vaW1nL2xfZGVsdGEucG5nXCIpO1xuICAgICAgICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9pbWcvbF9kZWx0YS5zdmdcIik7XG4gICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XG4gICAgICAgIGJvcmRlcjogMDtcbiAgICAgICAgZm9udDogMC8wIGE7XG4gICAgICAgIHRleHQtc2hhZG93OiBub25lO1xuICAgICAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgIG1hcmdpbjogMTJweCAwO1xuXG4gICAgICAgIEBpbmNsdWRlIGJwLXhsIHtcbiAgICAgICAgICAgIHdpZHRoOiAzMCU7XG4gICAgICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyogQWNjZXNzIE5hdiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXG5cbi5hY2Nlc3MtbmF2IHtcbiAgICBtYXJnaW46IDAgMCAzcHg7XG4gICAgcGFkZGluZzogLjVlbSAwO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBjb2xvcjogI2ZmZjtcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgIEBpbmNsdWRlIGZvbnQtc2l6ZSguNzUsIDEuNSk7XG4gICAgZm9udC1mYW1pbHk6ICdNb250c2VycmF0JywgQXJpYWwsIHNhbnMtc2VyaWY7XG4gICAgYmFja2dyb3VuZDogJGRhcmstdGV4dDtcbiAgICBib3JkZXItYm90dG9tOiAzcHggc29saWQ7XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvdHRvbTogLTNweDtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogM3B4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDJhY2QwO1xuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHRyYW5zcGFyZW50IDUwJSwgIzU2ZTJjZSA1MCUpO1xuICAgICAgICBiYWNrZ3JvdW5kLXNpemU6IDM1MHB4IDM1MHB4O1xuICAgIH1cbn1cbiIsIi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICBGb290ZXJcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuZm9vdGVyIHtcbiAgICBtYXJnaW46IDFlbSAwIDA7XG4gICAgcGFkZGluZzogMWVtIDA7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZDogJGRhcmstdGV4dDtcbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ== */

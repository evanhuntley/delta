/*!
Theme Name: Barebones
Description: A Sass build of the Barebones WordPress base theme.
Author: James Young (@welcomebrand)
Author URI: http://welcomebrand.co.uk;
Version: 1.0
*/
/*

    GLOBAL RESETS
    =============

    Standard reset styles and a few extra bits and pieces including
    setting border-box on all elements.

*/
html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, abbr, address, cite, code, del, dfn, em, img, ins, kbd, q, samp, small, strong, sub, sup, var, b, i, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table, caption, tbody, tfoot, thead, tr, th, td, article, aside, dialog, figure, footer, header, hgroup, menu, nav, section, time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  outline: 0;
  vertical-align: baseline;
  background: transparent; }
article, aside, dialog, figure, footer, header, hgroup, nav, section {
  display: block; }
nav ul {
  list-style: none; }
blockquote, q {
  quotes: none; }
blockquote:before, blockquote:after, q:before, q:after {
  content: '';
  content: none; }
a {
  margin: 0;
  padding: 0;
  border: 0;
  vertical-align: baseline;
  background: transparent; }
ins, mark {
  background: #333;
  color: #fff;
  text-decoration: none; }
mark {
  display: inline-block;
  padding: .1em;
  text-shadow: none;
  background: #f2d3a9;
  color: #a93901;
  border-radius: 2px; }
del {
  text-decoration: line-through; }
abbr[title], dfn[title] {
  border-bottom: 1px dotted #000;
  cursor: help; }
table {
  border-collapse: collapse;
  border-spacing: 0; }
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0; }
::-moz-selection, ::-webkit-selection, ::-moz-selection {
  text-shadow: none;
  background: #333;
  color: #fff; }
::-moz-selection, ::-webkit-selection, ::selection {
  text-shadow: none;
  background: #333;
  color: #fff; }
.cf:before, .cf:after {
  content: "";
  display: table; }
.cf:after {
  clear: both; }
.cf {
  zoom: 1; }
[type=submit] {
  cursor: pointer; }
* {
  box-sizing: border-box;
  -webkit-text-size-adjust: none;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }
/*

    MIXINS AND VARIABLES
    ====================

    All mixins and variables live here. Where possible, please include
    a source link if they're written by someone else along with an
    indication of how they should be used in the css files.

*/
/* Colour Palette */
/* REM Font sizing - http://blog.divshot.com/post/29552945105/useful-sass-mixins-for-responsive-design-font-sizing */
/* Define Media Queries - http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
/* Hover animation */
/* Gradient */
/* Clearfix http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
.primary, header {
  *zoom: 1; }
.primary:before, header:before {
    content: " ";
    display: table; }
.primary:after, header:after {
    content: " ";
    display: table;
    clear: both; }
/* Visually hide element http://zerosixthree.se/8-sass-mixins-you-must-have-in-your-toolbox/ */
/* Image floats */
/*
	NOTE: If you use Google fonts, import it here. Don't include the http bit then it's safe across secure too
	@import url(//fonts.googleapis.com/css?family=Paytone+One;
*/
/*
Font weights set as variables because sometimes there are multiple weights,
so an example use might also be a variable of $mid-weight: 500;
If you've just got normal and bold, you don't need the variable.
*/
html {
  font-size: 100%; }
body {
  font-size: 16px;
  line-height: 24px;
  font-size: 1rem;
  line-height: 1.5rem;
  font-family: 'Raleway', Arial, sans-serif; }
h1, h2, h3, h4, h5, h6 {
  font-size: 24px;
  line-height: 28px;
  font-size: 1.5rem;
  line-height: 1.75rem;
  font-family: 'Montserrat', Arial, sans-serif;
  text-transform: uppercase;
  color: #473c51; }
a {
  -webkit-transition: all 0.3s ease 0s;
  transition: all 0.3s ease 0s;
  color: #02b3c6;
  text-decoration: none; }
a:hover, a:active {
    outline: 0; }
a:focus {
  outline: thin dotted; }
strong, b {
  font-weight: 600; }
.small {
  font-size: 12px;
  line-height: 20px;
  font-size: 0.75rem;
  line-height: 1.25rem; }
pre, code {
  font-family: Monaco, "Bitstream Vera Sans Mono", "Lucida Console", Terminal; }
/*

    GENEAL FORM STUFF
    =================

    This is more reset based stuff, if you've got a specific form, it would be
    best to create it as a partial scss file and import it to screen.scss

*/
form {
  margin: 0; }
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }
legend {
  border: 0;
  padding: 0;
  white-space: normal;
  *margin-left: -7px; }
button,
input,
select,
textarea {
  font-size: 100%;
  margin: 0;
  vertical-align: baseline;
  *vertical-align: middle; }
button,
input {
  line-height: normal; }
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer;
  *overflow: visible; }
button[disabled],
input[disabled] {
  cursor: default; }
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  padding: 0;
  *height: 13px;
  *width: 13px; }
input[type="search"] {
  -webkit-appearance: textfield;
  box-sizing: content-box; }
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }
textarea {
  overflow: auto;
  vertical-align: top;
  resize: vertical; }
.page .section-header {
  text-align: center;
  background: #01acd0;
  background: -webkit-linear-gradient(left, #01acd0, #54e0ce);
  background: linear-gradient(to right, #01acd0, #54e0ce); }
.page .section-header h1 {
    color: #fff;
    font-weight: 400; }
@media only screen and (min-width: 64em) {
      .page .section-header h1 {
        font-size: 70px;
        line-height: 32px;
        font-size: 4.375rem;
        line-height: 2rem; } }
.page .content {
  color: #666666; }
/* Breadcrumbs ------------------------------------------------------ */
.breadcrumbs {
  padding: 1em 0;
  border-bottom: 1px solid #dbdbdb;
  background: #f8f8f8;
  font-size: 12px;
  line-height: 19.2px;
  font-size: 0.75rem;
  line-height: 1.2rem;
  text-transform: uppercase;
  font-weight: 600;
  color: #717171; }
/* Sidebar ---------------------------------------------------------- */
aside .widget h3 {
  font-size: 16px;
  line-height: 24px;
  font-size: 1rem;
  line-height: 1.5rem;
  font-weight: 400; }
aside .widget ul {
  margin: 0 0 1em;
  list-style-type: none; }
aside .widget li {
  padding: .5em;
  border-bottom: 1px solid #eeeeee; }
/*

    SITEWIDE ELEMENTS
    ========================

    Top level layout elements go in here, if you're building a module or page
    element of some sort, split it out into its own scss file and update
    styles.scss to import it.

*/
body {
  width: 100%;
  margin: 0 auto;
  padding: 0; }
h1, h2, h3, h4, h5, h6 {
  margin: 1em 0; }
ul, ol {
  margin: 0 0 1.5em 1.5em; }
li > ul,
li > ol {
  margin-bottom: 0; }
img,
a img {
  -ms-interpolation-mode: bicubic;
  max-width: 100%;
  min-height: auto;
  vertical-align: middle; }
button, .button, .page .woocommerce a.button {
  margin: 1em 0;
  padding: 1em 2em;
  background: #01acd0;
  background: -webkit-linear-gradient(left, #01acd0, #54e0ce);
  background: linear-gradient(to right, #01acd0, #54e0ce);
  text-transform: uppercase;
  color: #fff;
  border-radius: 0; }
/* ================================================================
    Site Layout
=================================================================== */
.main-layout, .container {
  width: 95%;
  margin: 0 auto; }
@media only screen and (min-width: 64em) {
    .main-layout, .container {
      width: 1000px; } }
.primary {
  padding: 1em 0; }
@media only screen and (min-width: 48em) {
    .primary .content {
      float: right;
      width: 75%;
      padding: 0 2em; } }
@media only screen and (min-width: 48em) {
    .primary .secondary-content {
      float: left;
      width: 25%; } }
/* ================================================================
    Header
=================================================================== */
header {
  background: #fff; }
@media only screen and (min-width: 64em) {
    header nav {
      width: 70%;
      float: right;
      margin: 1em 0;
      text-align: right; } }
header nav ul {
    margin: 0;
    padding: 0; }
header nav li {
    display: block; }
@media only screen and (min-width: 64em) {
      header nav li {
        display: inline-block;
        margin: 0 .5em; } }
header nav li.current_page_item a {
      color: #02b3c6; }
header nav a {
    display: block;
    padding: 1em;
    text-transform: uppercase;
    font-family: 'Montserrat', Arial, sans-serif;
    color: #1c191f;
    font-size: 14px;
    line-height: 22.4px;
    font-size: 0.875rem;
    line-height: 1.4rem; }
header .logo {
    display: block;
    width: 320px;
    height: 59px;
    margin: 1em 0;
    background: url("../img/l_delta.png");
    background: url("../img/l_delta.svg");
    background-repeat: no-repeat;
    border: 0;
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
    margin: 12px 0; }
@media only screen and (min-width: 64em) {
      header .logo {
        width: 30%;
        float: left; } }
/* Access Nav ------------------------------------------------------- */
.access-nav {
  margin: 0 0 3px;
  padding: .5em 0;
  position: relative;
  color: #fff;
  text-transform: uppercase;
  font-size: 12px;
  line-height: 24px;
  font-size: 0.75rem;
  line-height: 1.5rem;
  font-family: 'Montserrat', Arial, sans-serif;
  background: #1c191f;
  border-bottom: 3px solid; }
.access-nav::before {
    position: absolute;
    bottom: -3px;
    content: "";
    width: 100%;
    height: 3px;
    background-color: #02acd0;
    background-image: -webkit-linear-gradient(left, transparent 50%, #56e2ce 50%);
    background-image: linear-gradient(90deg, transparent 50%, #56e2ce 50%);
    background-size: 350px 350px; }
/* ================================================================
    Footer
=================================================================== */
footer {
  margin: 1em 0 0;
  padding: 1em 0;
  color: #fff;
  background: #1c191f; }

/*# sourceMappingURL=data:application/json;base64, */
